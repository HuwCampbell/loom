#!/bin/sh -eu
#
# Prints the path to the Purescript bin directory for a specific version.
#
# Usage
# =====
#
# Set version specific environment variables to the location where that
# Purescript version is installed:
#
#   PURESCRIPT_0_8_5=/usr/local/purescript-0.8.5.0
#   PURESCRIPT_0_9_3=/usr/local/purescript-0.9.3
#
# You can then summon the path to Purescript's bin directory as follows:
#
#   $ PURESCRIPT_VERSION=7.8.4 purescript-path
#   /usr/local/purescript-7.8.4/bin
#
# This can be used to put the desired Purescript on the PATH:
#
#   $ PATH=$(PURESCRIPT_VERSION=7.8.4 purescript-path):$PATH psc
#
# - or -
#
#   $ PATH=$(PURESCRIPT_VERSION=7.10.2 purescript-path):$PATH psc
#

command -v psc >/dev/null 2>&1 && {
  PURESCRIPT_DEFAULT=$(psc --version | xargs -n 1 | tail -1)
}

if [ -z ${PURESCRIPT_VERSION+x} ]; then
  if [ ! -z ${PURESCRIPT_DEFAULT+x} ]; then
    # PURESCRIPT_VERSION not set, use the Purescript on the PATH
    dirname $(command -v psc)
    exit 0
  fi

  >&2 echo "PURESCRIPT_VERSION is not set and Purescript could not be found on the PATH"
  exit 1
fi

PURESCRIPT_ENV=$(printf "PURESCRIPT_%s" "$PURESCRIPT_VERSION" | tr '.' '_')

set +e
PURESCRIPT_ROOT=$(printenv $PURESCRIPT_ENV)
PURESCRIPT_ENV_CODE=$?
set -e

if [ $PURESCRIPT_ENV_CODE != 0 ]; then
  >&2 echo "Could not put Purescript $PURESCRIPT_VERSION on the PATH as $PURESCRIPT_ENV was not set"
  exit 1
fi

PURESCRIPT_PATH=$PURESCRIPT_ROOT/bin
PURESCRIPT_FOUND=$($PURESCRIPT_PATH/psc --version | xargs -n 1 | tail -1)

if [ "$PURESCRIPT_VERSION" = "$PURESCRIPT_FOUND" ]; then
  echo $PURESCRIPT_PATH
  exit 0
fi

if [ ! -z ${PURESCRIPT_DEFAULT+x} ]; then
  if [ "$PURESCRIPT_VERSION" = "$PURESCRIPT_DEFAULT" ]; then
    # Purescript was found on the PATH, and is the version we want
    dirname $(command -v psc)
    exit 0
  fi
fi

>&2 echo "Found Purescript $PURESCRIPT_FOUND at $PURESCRIPT_PATH/psc (but was expecting $PURESCRIPT_VERSION)"
exit 1
